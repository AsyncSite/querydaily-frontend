'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

export default function QuestionPage({ params }: { params: { id: string } }) {
  const router = useRouter();
  const [myAnswer, setMyAnswer] = useState('');
  const [unlocked, setUnlocked] = useState(false);
  const [shared, setShared] = useState(false);
  const [showAnswerForm, setShowAnswerForm] = useState(false);
  const [likedAnswers, setLikedAnswers] = useState<number[]>([]);
  const [bookmarked, setBookmarked] = useState(false);
  const [sortBy, setSortBy] = useState<'popular' | 'recent'>('popular');

  const currentId = parseInt(params.id);

  const question = {
    id: params.id,
    number: currentId,
    total: 3,
    title: currentId === 1 ? 'Spring AOPÏùò ÎèôÏûë ÏõêÎ¶¨Î•º ÏÑ§Î™ÖÌïòÏÑ∏Ïöî'
           : currentId === 2 ? 'JPA N+1 Î¨∏Ï†úÏôÄ Ìï¥Í≤∞ Î∞©Î≤ï'
           : 'HTTPÏôÄ HTTPSÏùò Ï∞®Ïù¥',
    description: currentId === 1 ? 'Spring AOPÍ∞Ä ÌîÑÎ°ùÏãú Ìå®ÌÑ¥ÏùÑ Í∏∞Î∞òÏúºÎ°ú Ïñ¥ÎñªÍ≤å ÎèôÏûëÌïòÎäîÏßÄ, ÏúÑÎπô ÏãúÏ†êÏùÄ Ïñ∏Ï†úÏù∏ÏßÄ ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.'
                 : currentId === 2 ? 'N+1 Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌïòÎäî ÏõêÏù∏Í≥º Ìï¥Í≤∞ Î∞©Î≤ïÏùÑ ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.'
                 : 'HTTPÏôÄ HTTPSÏùò Ï∞®Ïù¥Ï†êÍ≥º HTTPSÍ∞Ä Î≥¥ÏïàÏùÑ Ï†úÍ≥µÌïòÎäî Î∞©ÏãùÏùÑ ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.',
    category: currentId === 1 ? 'Spring' : currentId === 2 ? 'JPA' : 'Network',
    difficulty: currentId === 3 ? 'Ï¥àÍ∏â' : 'Ï§ëÍ∏â',
    hint: currentId === 1 ? 'üí° JDK Dynamic ProxyÏôÄ CGLIBÏùò Ï∞®Ïù¥Î•º ÏÉùÍ∞ÅÌï¥Î≥¥ÏÑ∏Ïöî.'
          : currentId === 2 ? 'üí° FetchTypeÍ≥º Ïó∞Í¥ÄÍ¥ÄÍ≥Ñ Î°úÎî© Ï†ÑÎûµÏùÑ Í≥†Î†§Ìï¥Î≥¥ÏÑ∏Ïöî.'
          : 'üí° SSL/TLS Ïù∏Ï¶ùÏÑúÏôÄ ÏïîÌò∏Ìôî Î∞©ÏãùÏùÑ ÏÉùÍ∞ÅÌï¥Î≥¥ÏÑ∏Ïöî.'
  };

  // Î™®Îì† ÎãµÎ≥Ä Îç∞Ïù¥ÌÑ∞
  const allAnswers = [
    {
      id: 1,
      author: { name: 'ÎùºÏù∏ Î∞±ÏóîÎìú', badge: 'Ïû¨ÏßÅ', company: 'LINE' },
      content: currentId === 1
        ? 'Spring AOPÎäî ÌîÑÎ°ùÏãú Ìå®ÌÑ¥ÏúºÎ°ú ÎèôÏûëÌï©ÎãàÎã§. Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Í∞Ä ÏûàÏúºÎ©¥ JDK Dynamic Proxy, ÏóÜÏúºÎ©¥ CGLIBÎ•º ÏÇ¨Ïö©Ìï¥Ïöî.\n\nÎü∞ÌÉÄÏûÑÏóê ÏúÑÎπôÏù¥ Ïù¥Î£®Ïñ¥ÏßÄÎ©∞, @AspectÎ°ú Ï†ïÏùòÌïú AdviceÍ∞Ä Ï°∞Ïù∏Ìè¨Ïù∏Ìä∏ÏóêÏÑú Ïã§ÌñâÎê©ÎãàÎã§.\n\nÏ£ºÏùòÌï† Ï†êÏùÄ Í∞ôÏùÄ ÌÅ¥ÎûòÏä§ ÎÇ¥Î∂Ä Î©îÏÑúÎìú Ìò∏Ï∂ú Ïãú ÌîÑÎ°ùÏãúÎ•º Í±∞ÏπòÏßÄ ÏïäÏïÑ AOPÍ∞Ä ÎèôÏûëÌïòÏßÄ ÏïäÎäîÎã§Îäî Í±∞ÏòàÏöî.'
        : currentId === 2
        ? 'N+1 Î¨∏Ï†úÎäî Ïó∞Í¥ÄÍ¥ÄÍ≥Ñ Ï°∞Ìöå Ïãú Í∞Å ÏóîÌã∞Ìã∞ÎßàÎã§ Ï∂îÍ∞Ä ÏøºÎ¶¨Í∞Ä Î∞úÏÉùÌïòÎäî Î¨∏Ï†úÏûÖÎãàÎã§.\n\nFetch JoinÏù¥ÎÇò @EntityGraphÎ•º ÏÇ¨Ïö©ÌïòÎ©¥ Ìïú Î≤àÏùò ÏøºÎ¶¨Î°ú Ìï¥Í≤∞Ìï† Ïàò ÏûàÏñ¥Ïöî.'
        : 'HTTPÎäî ÌèâÎ¨∏ ÌÜµÏã†Ïù¥Í≥†, HTTPSÎäî SSL/TLSÎ°ú ÏïîÌò∏ÌôîÎêú ÌÜµÏã†ÏûÖÎãàÎã§.\n\nHTTPSÎäî Í≥µÍ∞úÌÇ§ ÏïîÌò∏Ìôî Î∞©ÏãùÏúºÎ°ú Îç∞Ïù¥ÌÑ∞Î•º Î≥¥Ìò∏Ìï©ÎãàÎã§.',
      likes: 127,
      timeAgo: '2ÏãúÍ∞Ñ Ï†Ñ',
      timestamp: Date.now() - 2 * 60 * 60 * 1000,
      preview: true
    },
    {
      id: 2,
      author: { name: 'ÎÑ§Ïù¥Î≤Ñ Ìï©Í≤©', badge: 'Ìï©Í≤©Ïûê', company: 'Naver' },
      content: currentId === 1
        ? 'Î©¥Ï†ëÏóêÏÑú Ïã§Ï†úÎ°ú "Í∞ôÏùÄ ÌÅ¥ÎûòÏä§ ÎÇ¥Î∂Ä Ìò∏Ï∂ú Ïãú Ïôú AOPÍ∞Ä Ïïà ÎêòÎäîÏßÄ" Î¨ºÏñ¥Î¥§Ïñ¥Ïöî.\n\nÌîÑÎ°ùÏãúÎ•º Í±∞ÏπòÏßÄ ÏïäÍ∏∞ ÎïåÎ¨∏Ïù¥ÎùºÍ≥† ÎãµÌñàÍ≥†, self-injectionÏúºÎ°ú Ìï¥Í≤∞Ìï† Ïàò ÏûàÎã§Í≥† ÏÑ§Î™ÖÌñàÏäµÎãàÎã§!'
        : currentId === 2
        ? 'Ïã§Î¨¥ÏóêÏÑú Í∞ÄÏû• ÎßéÏù¥ Ïì∞Îäî Í±¥ Fetch JoinÏù¥ÏóêÏöî.\n\nÎã§Îßå ÌéòÏù¥Ïßï Ï≤òÎ¶¨ Ïãú Î©îÎ™®Î¶¨ÏóêÏÑú ÌéòÏù¥ÏßïÏù¥ ÎêòÎäî Î¨∏Ï†úÍ∞Ä ÏûàÏúºÎãà @BatchSizeÎ•º ÏÇ¨Ïö©ÌïòÎäî Í≤å ÎÇòÏùÑ Ïàò ÏûàÏñ¥Ïöî.'
        : 'HTTPSÎäî ÎåÄÏπ≠ÌÇ§ÏôÄ Í≥µÍ∞úÌÇ§ ÏïîÌò∏ÌôîÎ•º Î™®Îëê ÏÇ¨Ïö©Ìï©ÎãàÎã§.\n\nÌï∏ÎìúÏÖ∞Ïù¥ÌÅ¨ Í≥ºÏ†ïÏóêÏÑú Í≥µÍ∞úÌÇ§Î°ú ÎåÄÏπ≠ÌÇ§Î•º ÍµêÌôòÌïòÍ≥†, Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îäî ÎåÄÏπ≠ÌÇ§Î°ú ÏïîÌò∏ÌôîÌï¥Ïöî.',
      likes: 89,
      timeAgo: '1Ïùº Ï†Ñ',
      timestamp: Date.now() - 24 * 60 * 60 * 1000,
      preview: true
    },
    {
      id: 3,
      author: { name: 'Ïπ¥Ïπ¥Ïò§ ÏãúÎãàÏñ¥', badge: 'Ïû¨ÏßÅ', company: 'Kakao' },
      content: 'Ïã§Î¨¥ Í≤ΩÌóòÏÉÅ AOPÎäî Ìä∏ÎûúÏû≠ÏÖò, Î°úÍπÖ, Î≥¥Ïïà Îì±Ïóê ÎßéÏù¥ ÏÇ¨Ïö©Îê©ÎãàÎã§.\n\nÌäπÌûà @TransactionalÎèÑ AOPÎ°ú Íµ¨ÌòÑÎêòÏñ¥ ÏûàÏ£†.\n\nÏÑ±Îä•Ïóê ÎØ∏ÏπòÎäî ÏòÅÌñ•ÏùÄ ÌÅ¨ÏßÄ ÏïäÏßÄÎßå, ÌîÑÎ°ùÏãú ÏÉùÏÑ± ÎπÑÏö©ÏùÄ Í≥†Î†§Ìï¥Ïïº Ìï©ÎãàÎã§.',
      likes: 64,
      timeAgo: '3Ïùº Ï†Ñ',
      timestamp: Date.now() - 3 * 24 * 60 * 60 * 1000,
      preview: false
    },
    {
      id: 4,
      author: { name: 'ÌÜ†Ïä§ Í∞úÎ∞úÏûê', badge: 'Ïû¨ÏßÅ', company: 'Toss' },
      content: 'CGLIBÎäî ÌÅ¥ÎûòÏä§ ÏÉÅÏÜç Î∞©ÏãùÏù¥Îùº final ÌÅ¥ÎûòÏä§ÎÇò Î©îÏÑúÎìúÏóêÎäî Ï†ÅÏö©Ìï† Ïàò ÏóÜÏñ¥Ïöî.\n\nÏù¥Îü∞ Ï†úÏïΩÏÇ¨Ìï≠ÎèÑ Î©¥Ï†ëÏóêÏÑú Î¨ºÏñ¥Î≥º Ïàò ÏûàÏúºÎãà ÏïåÏïÑÎëêÎ©¥ Ï¢ãÏäµÎãàÎã§.',
      likes: 52,
      timeAgo: '5Ïùº Ï†Ñ',
      timestamp: Date.now() - 5 * 24 * 60 * 60 * 1000,
      preview: false
    }
  ];

  // ÎØ∏Î¶¨Î≥¥Í∏∞ ÎãµÎ≥ÄÍ≥º Ïû†Í∏¥ ÎãµÎ≥Ä Î∂ÑÎ¶¨
  const previewAnswers = allAnswers.filter(a => a.preview);
  const lockedAnswers = allAnswers.filter(a => !a.preview);

  const handleShare = () => {
    setShared(true);
    setUnlocked(true);
  };

  const toggleLike = (answerId: number) => {
    setLikedAnswers(prev =>
      prev.includes(answerId)
        ? prev.filter(id => id !== answerId)
        : [...prev, answerId]
    );
  };

  const nextId = currentId < 3 ? currentId + 1 : null;
  const prevId = currentId > 1 ? currentId - 1 : null;

  const handleNext = () => {
    if (nextId) {
      router.push(`/prototype11-option2/questions/${nextId}`);
    } else {
      router.push('/prototype11-option2/dashboard');
    }
  };

  const handlePrev = () => {
    if (prevId) {
      router.push(`/prototype11-option2/questions/${prevId}`);
    }
  };

  return (
    <div className="px-6 py-8 space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <Link href="/prototype11-option2/dashboard" className="text-gray-500">
            ‚Üê Îí§Î°ú
          </Link>
          <div className="flex items-center gap-4">
            <button
              onClick={() => setBookmarked(!bookmarked)}
              className="text-2xl transition-transform hover:scale-110"
            >
              {bookmarked ? '‚≠êÔ∏è' : '‚òÜ'}
            </button>
            <span className="text-sm font-medium text-gray-500">
              {question.number}/3
            </span>
          </div>
        </div>

        {/* Question */}
        <div className="bg-white rounded-2xl p-6 shadow-md border border-gray-200">
          <div className="flex gap-2 mb-4">
            <span className="px-2 py-1 bg-indigo-50 text-indigo-600 text-xs rounded-full">
              {question.category}
            </span>
            <span className="px-2 py-1 bg-orange-50 text-orange-600 text-xs rounded-full">
              {question.difficulty}
            </span>
          </div>

          <h2 className="text-xl font-bold text-gray-900 mb-3">
            {question.title}
          </h2>
          <p className="text-sm text-gray-600 leading-relaxed">
            {question.description}
          </p>

          <div className="mt-4 pt-4 border-t border-gray-100">
            <p className="text-sm text-gray-500">
              {question.hint}
            </p>
          </div>
        </div>

        {/* Preview Header */}
        <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl p-5 shadow-sm border border-purple-300">
          <div className="flex items-start gap-3">
            <span className="text-2xl">üëÄ</span>
            <div>
              <h3 className="font-bold text-gray-900 mb-1">
                ÎãµÎ≥Ä ÎØ∏Î¶¨Î≥¥Í∏∞
              </h3>
              <p className="text-sm text-gray-600">
                2Í∞úÏùò ÎãµÎ≥ÄÏùÑ Î®ºÏ†Ä ÌôïÏù∏Ìï† Ïàò ÏûàÏñ¥Ïöî
              </p>
            </div>
          </div>
        </div>

        {/* Preview Answers */}
        <div className="space-y-4">
          {previewAnswers.map((answer) => (
            <div
              key={answer.id}
              className="bg-white rounded-2xl p-6 shadow-md border border-gray-200"
            >
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-gradient-to-br from-indigo-400 to-purple-500 rounded-full flex items-center justify-center text-white font-bold">
                  {answer.author.name[0]}
                </div>
                <div className="flex-1">
                  <div className="flex items-center gap-2">
                    <span className="font-medium text-gray-900 text-sm">
                      {answer.author.name}
                    </span>
                    <span className={`px-2 py-0.5 text-xs rounded ${
                      answer.author.badge === 'Ïû¨ÏßÅ'
                        ? 'bg-blue-100 text-blue-700'
                        : 'bg-green-100 text-green-700'
                    }`}>
                      {answer.author.badge}
                    </span>
                  </div>
                  <div className="text-xs text-gray-500">{answer.timeAgo}</div>
                </div>
              </div>

              <p className="text-sm text-gray-700 leading-relaxed whitespace-pre-line mb-4">
                {answer.content}
              </p>

              <button
                onClick={() => toggleLike(answer.id)}
                className={`flex items-center gap-1 text-sm transition-colors ${
                  likedAnswers.includes(answer.id)
                    ? 'text-pink-600 font-medium'
                    : 'text-gray-400 hover:text-pink-600'
                }`}
              >
                <span className="text-lg">
                  {likedAnswers.includes(answer.id) ? '‚ù§Ô∏è' : 'ü§ç'}
                </span>
                <span>
                  {answer.likes + (likedAnswers.includes(answer.id) ? 1 : 0)}
                </span>
              </button>
            </div>
          ))}
        </div>

        {/* Locked Answers Section */}
        {!unlocked && (
          <div className="relative">
            {/* Blurred Locked Answers */}
            <div className="space-y-4 opacity-40 blur-sm pointer-events-none">
              {lockedAnswers.map((answer) => (
                <div
                  key={answer.id}
                  className="bg-white rounded-2xl p-6 shadow-md border border-gray-200"
                >
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-10 h-10 bg-gradient-to-br from-gray-300 to-gray-400 rounded-full flex items-center justify-center text-white font-bold">
                      ?
                    </div>
                    <div className="flex-1">
                      <div className="h-4 bg-gray-200 rounded w-32 mb-2"></div>
                      <div className="h-3 bg-gray-100 rounded w-20"></div>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <div className="h-3 bg-gray-200 rounded"></div>
                    <div className="h-3 bg-gray-200 rounded w-5/6"></div>
                    <div className="h-3 bg-gray-200 rounded w-4/6"></div>
                  </div>
                </div>
              ))}
            </div>

            {/* Unlock CTA Overlay */}
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="bg-white rounded-2xl p-8 shadow-2xl border-2 border-pink-400 max-w-sm mx-4">
                <div className="text-center">
                  <div className="text-5xl mb-4">üîí</div>
                  <h3 className="text-xl font-bold text-gray-900 mb-3">
                    ÎÇòÎ®∏ÏßÄ {lockedAnswers.length}Í∞ú ÎãµÎ≥Ä Î≥¥Í∏∞
                  </h3>
                  <p className="text-sm text-gray-600 mb-6">
                    ÎÇ¥ ÎãµÎ≥ÄÏùÑ Í≥µÏú†ÌïòÎ©¥ Î™®Îì† ÎãµÎ≥ÄÏùÑ Î≥º Ïàò ÏûàÏñ¥Ïöî
                  </p>
                  <button
                    onClick={() => setShowAnswerForm(true)}
                    className="w-full py-3 bg-gradient-to-r from-pink-500 to-rose-600 text-white rounded-xl font-semibold hover:shadow-lg transition-all"
                  >
                    ÎãµÎ≥Ä ÏûëÏÑ±ÌïòÍ≥† Ïó¥ÎûåÌïòÍ∏∞
                  </button>
                  <p className="text-xs text-gray-500 mt-3">
                    +10 Ïù∏ÏÇ¨Ïù¥Ìä∏ÎèÑ Î∞õÏùÑ Ïàò ÏûàÏñ¥Ïöî
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Unlocked Answers */}
        {unlocked && (
          <div className="space-y-4">
            {lockedAnswers.map((answer) => (
              <div
                key={answer.id}
                className="bg-white rounded-2xl p-6 shadow-md border border-gray-200 animate-fade-in"
              >
                <div className="flex items-center gap-3 mb-4">
                  <div className="w-10 h-10 bg-gradient-to-br from-indigo-400 to-purple-500 rounded-full flex items-center justify-center text-white font-bold">
                    {answer.author.name[0]}
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center gap-2">
                      <span className="font-medium text-gray-900 text-sm">
                        {answer.author.name}
                      </span>
                      <span className="px-2 py-0.5 text-xs rounded bg-blue-100 text-blue-700">
                        {answer.author.badge}
                      </span>
                    </div>
                    <div className="text-xs text-gray-500">{answer.timeAgo}</div>
                  </div>
                </div>

                <p className="text-sm text-gray-700 leading-relaxed whitespace-pre-line mb-4">
                  {answer.content}
                </p>

                <button
                  onClick={() => toggleLike(answer.id)}
                  className={`flex items-center gap-1 text-sm transition-colors ${
                    likedAnswers.includes(answer.id)
                      ? 'text-pink-600 font-medium'
                      : 'text-gray-400 hover:text-pink-600'
                  }`}
                >
                  <span className="text-lg">
                    {likedAnswers.includes(answer.id) ? '‚ù§Ô∏è' : 'ü§ç'}
                  </span>
                  <span>
                    {answer.likes + (likedAnswers.includes(answer.id) ? 1 : 0)}
                  </span>
                </button>
              </div>
            ))}
          </div>
        )}

        {/* Answer Form Modal */}
        {showAnswerForm && !shared && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-6 z-50" onClick={() => setShowAnswerForm(false)}>
            <div className="bg-white rounded-3xl p-8 max-w-lg w-full shadow-2xl" onClick={(e) => e.stopPropagation()}>
              <h3 className="text-xl font-bold text-gray-900 mb-4">ÎÇ¥ ÎãµÎ≥Ä ÏûëÏÑ±</h3>
              <textarea
                value={myAnswer}
                onChange={(e) => setMyAnswer(e.target.value)}
                placeholder="ÏûêÏú†Î°≠Í≤å ÏûëÏÑ±Ìï¥Î≥¥ÏÑ∏Ïöî. ÏôÑÎ≤ΩÌï† ÌïÑÏöî ÏóÜÏñ¥Ïöî!"
                className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:border-pink-500 focus:outline-none resize-none mb-4"
                rows={10}
              />
              <div className="flex gap-3">
                <button
                  onClick={() => setShowAnswerForm(false)}
                  className="flex-1 py-3 bg-gray-200 text-gray-700 rounded-xl font-semibold hover:bg-gray-300 transition-all"
                >
                  Ï∑®ÏÜå
                </button>
                <button
                  onClick={handleShare}
                  disabled={!myAnswer.trim()}
                  className="flex-1 py-3 bg-gradient-to-r from-pink-500 to-rose-600 text-white rounded-xl font-semibold hover:shadow-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Í≥µÏú†ÌïòÍ∏∞
                </button>
              </div>
            </div>
          </div>
        )}

        {shared && (
          <div className="bg-emerald-100 rounded-2xl p-5 shadow-sm border border-emerald-400 text-center">
            <div className="text-3xl mb-2">‚úÖ</div>
            <div className="font-semibold text-gray-900 mb-1">
              Í≥µÏú† ÏôÑÎ£å!
            </div>
            <div className="text-sm text-emerald-700">
              +10 Ïù∏ÏÇ¨Ïù¥Ìä∏Î•º Î∞õÏïòÏñ¥Ïöî üíé
            </div>
          </div>
        )}

        {/* Navigation Buttons */}
        <div className="flex gap-3">
          {prevId && (
            <button
              onClick={handlePrev}
              className="flex-1 py-4 bg-white text-gray-700 border-2 border-gray-300 rounded-xl font-semibold hover:border-pink-400 hover:bg-gray-50 transition-all"
            >
              ‚Üê Ïù¥Ï†Ñ ÏßàÎ¨∏
            </button>
          )}
          <button
            onClick={handleNext}
            className={`${prevId ? 'flex-1' : 'w-full'} py-4 bg-gradient-to-r from-pink-500 to-rose-600 text-white rounded-xl font-semibold hover:shadow-lg transition-all`}
          >
            {nextId ? 'Îã§Ïùå ÏßàÎ¨∏ ‚Üí' : 'ÏôÑÎ£åÌïòÍ≥† ÎèåÏïÑÍ∞ÄÍ∏∞'}
          </button>
        </div>
    </div>
  );
}
